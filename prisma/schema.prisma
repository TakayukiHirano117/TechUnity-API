// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String        @id @default(cuid())
  name             String?
  description      String?
  githubUrl        String?       @map(name: "github_url")
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  createdAt        DateTime      @default(now()) @map(name: "created_at")
  updatedAt        DateTime      @updatedAt @map(name: "updated_at")
  accounts         Account[]
  sessions         Session[]
  recruits_creator Recruit[]     @relation("creator")
  Like             Like[]
  Application      Application[]
  Hire             Hire[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Recruit {
  id            String        @id @default(cuid())
  title         String
  content       String
  repositoryUrl String?       @map(name: "repository_url")
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  isPublished   Boolean       @default(false) @map(name: "is_published")
  creator       User          @relation(fields: [creatorId], references: [id], name: "creator")
  creatorId     String
  likes         Like[]
  applications  Application[]
  hires         Hire[]

  @@map(name: "recruits")
}

model Like {
  id        String  @id @default(cuid())
  userId    String
  recruitId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  recruit   Recruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)

  @@unique([userId, recruitId])
  @@map(name: "likes")
}

model Application {
  id        String  @id @default(cuid())
  userId    String
  recruitId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  recruit   Recruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)

  @@unique([userId, recruitId])
  @@map(name: "applications")
}

model Hire {
  id        String  @id @default(cuid())
  userId    String
  recruitId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  recruit   Recruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)

  @@unique([userId, recruitId])
  @@map(name: "hires")
}
